(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{592:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=e.className,t=void 0===n?"":n,r=e.slotKey;return a.default.createElement(a.default.Fragment,null,a.default.createElement(o.default,{slotKey:r,className:t,markDownString:"\n# Config Reference\n\n\n\n## Basic Config\n\n### base\n\n- Type: `string`\n- Default: `/`\n\nThe base URL the site will be deployed at. You will need to set this if you plan to deploy your site under a sub path, for example, GitHub pages. If you plan to deploy your site to `https://foo.github.io/bar/`, then you should set `base` to `\"/bar/\"`. It should always start and end with a slash.\n\nThe `base` is automatically prepended to all the URLs that start with `/` in other options, so you only need to specify it once.\n\n**Also see:**\n\n- [Base URL](../guide/assets.md#base-url)\n- [Deploy Guide > GitHub Pages](../guide/deploy.md#github-pages)\n\n### title\n\n- Type: `string`\n- Default: `undefined`\n\nTitle for the site. This will be the prefix for all page titles, and displayed in the navbar in the default theme.\n\n### description\n\n- Type: `string`\n- Default: `undefined`\n\nDescription for the site. This will render as a `<meta>` tag in the page HTML.\n\n### head\n\n- Type: `Array`\n- Default: `[]`\n\nExtra tags to inject into the page HTML `<head>`. You can specify each tag in the form of `[tagName, { attrName: attrValue }, innerHTML?]`. For example, to add a custom favicon:\n\n``` js\nmodule.exports = {\n  head: [\n    ['link', { rel: 'icon', href: '/logo.png' }]\n  ]\n}\n```\n\n### host\n\n- Type: `string`\n- Default: `'0.0.0.0'`\n\nSpecify the host to use for the dev server.\n\n### port\n\n- Type: `number`\n- Default: `8080`\n\nSpecify the port to use for the dev server.\n\n### temp\n\n- Type: `string`\n- Default: `/path/to/@mdpress/core/.temp`\n\n\nSpecify the temporary directory for client.\n\n### dest\n\n- Type: `string`\n- Default: `.mdpress/dist`\n\nSpecify the output directory for `mdpress build`. If a relative path is specified, it will be resolved based on `process.cwd()`.\n\n### locales\n\n- Type: `{ [path: string]: Object }`\n- Default: `undefined`\n\nSpecify locales for i18n support. For more details, see the guide on [Internationalization](../guide/i18n.md).\n\n### shouldPrefetch\n\n- Type: `Function`\n- Default: `() => true`\n\nA function to control what files should have `<link rel=\"prefetch\">` resource hints generated. \n\n### cache\n\n- Type: `boolean|string`\n- Default: `true`\n\nMdPress uses [cache-loader](https://github.com/webpack-contrib/cache-loader) by default to greatly speed up the compilation of webpack.\n\nYou can use this option to specify the path to the cache, and can also remove the cache before each build by setting it to `false`.\n\n::: tip\nYou can also use this option through the CLI:\n\n```bash\nmdpress dev docs --cache .cache # set cache path\nmdpress dev docs --no-cache     # remove cache before each build.\n```\n:::\n\n### extraWatchFiles\n\n- Type: `Array`\n- Default: `[]`\n\nSpecify extra files to watch.\n\nYou can watch any file if you want. File changes will trigger `mdpress` rebuilding and real-time updates.\n\n``` js\nmodule.exports = {\n  extraWatchFiles: [\n    '.mdpress/foo.js', // Relative path usage\n    '/path/to/bar.js'   // Absolute path usage\n  ]\n}\n```\n\n### patterns\n\n- Type: `Array`\n- Default: `['**/*.md', '**/*.js']`\n\nSpecify which pattern of files you want to be resolved.\n\n## Styling\n\n### palette.styl\n\nTo apply simple overrides to the styling of the [default preset](https://github.com/docschina/mdpress/blob/master/packages/@mdpress/core/lib/client/style/config.styl) or define some variables to use later, you can create a `.mdpress/styles/palette.styl` file.\n\nThere are some predefined variables you can tweak:\n\n``` stylus\n// colors\n$accentColor = #3eaf7c\n$textColor = #2c3e50\n$borderColor = #eaecef\n$codeBgColor = #282c34\n$arrowBgColor = #ccc\n$badgeTipColor = #42b983\n$badgeWarningColor = darken(#ffe564, 35%)\n$badgeErrorColor = #DA5961\n\n// layout\n$navbarHeight = 3.6rem\n$sidebarWidth = 20rem\n$contentWidth = 740px\n$homePageWidth = 960px\n\n// responsive breakpoints\n$MQNarrow = 959px\n$MQMobile = 719px\n$MQMobileNarrow = 419px\n```\n\n::: danger Note\nYou should ONLY define variables in this file. Since `palette.styl` will be imported at the end of the root Stylus config file, as a config, several files will use it, so once you wrote styles here, your style would be duplicated by multiple times.\n:::\n\n### index.styl\n\nMdPress provides a convenient way to add extra styles. You can create a `.mdpress/styles/index.styl` file for that. This is a [Stylus](http://stylus-lang.com/) file but you can use normal CSS syntax as well.\n\n```stylus\n.content {\n  font-size 30px\n}\n```\n\n**Also see:**\n\n- [Why canâ€™t `palette.styl` and `index.styl` merge into one API?](../faq/README.md#why-can-t-palette-styl-and-index-styl-merge-into-one-api)\n\n## Theming\n\n### theme\n\n- Type: `string`\n- Default: `undefined`\n\nSpecify this to use a custom theme.\n\n**Also see:**\n\n- [Using a theme](../theme/using-a-theme.md).\n\n### themeConfig\n\n- Type: `Object`\n- Default: `{}`\n\nProvide config options to the used theme. The options will vary depending on the theme you are using.\n\n**Also see:**\n\n- [Default Theme Configuration](../theme/default-theme-config.md).\n\n## Pluggable\n\n### plugins\n\n- Type: `Object|Array`\n- Default: `undefined`\n\nPlease check out [Plugin > Using a plugin](../plugin/using-a-plugin.md) to learn how to use a plugin.\n\n## Markdown\nMarkdown is divided into Node and client configuration. [Client configuration](../guide/basic-config.html##app-level-enhancements) needs to be done in `enhanceApp`.\n\n### markdown.lineNumbers<Badge text=\"client\"/>\n\n- Type: `boolean`\n- Default: `undefined`\n\nWhether to show line numbers to the left of each code blocks.\n\n**Also see:**\n\n- [Line Numbers](../guide/markdown.md#line-numbers)\n\n### markdown.slugify<Badge text=\"client\"/>\n\n- Type: `Function`\n- Default: [source](https://github.com/docschina/mdpress/tree/master/packages/@mdpress/shared-utils/src/slugify.ts)\n\nFunction for transforming [header](../miscellaneous/glossary.md#headers) texts into slugs. Changing this affects the ids/links generated for header anchors, [table of contents](../guide/markdown.md#table-of-contents) and [sidebar](../theme/default-theme-config.md#sidebar) links.\n\n### markdown.anchor<Badge text=\"client\"/>\n\n- Type: `Object`\n- Default: `{ permalink: true, permalinkBefore: true, permalinkSymbol: '#' }`\n\nOptions for [markdown-it-anchor](https://github.com/valeriangalliat/markdown-it-anchor). (Note: prefer `markdown.slugify` to customize header ids.)\n\n### markdown.externalLinks<Badge text=\"client\"/>\n\n- Type: `Object`\n- Default: `{ target: '_blank', rel: 'noopener noreferrer' }`\n\nThe key and value pair will be added to `<a>` tags that point to an external link. The default option will open external links in a new window.\n\n### markdown.toc<Badge text=\"client\"/>\n\n- Type: `Object`\n- Default: `{ includeLevel: [2, 3] }`\n\nOptions for [markdown-it-table-of-contents](https://github.com/Oktavilla/markdown-it-table-of-contents). (Note: prefer `markdown.slugify` to customize header ids.)\n\n### markdown.extendMarkdown<Badge text=\"client\"/>\n\n- Type: `Function`\n- Default: `undefined`\n\nA function to edit default config or apply extra plugins to the [markdown-it](https://github.com/markdown-it/markdown-it) instance used to render source files. For example:\n\n``` js\nmodule.exports = {\n  markdown: {\n    extendMarkdown: md => {\n      md.set({ breaks: true })\n      md.use(require('markdown-it-xxx'))\n    }\n  }\n}\n```\n\n::: tip\nThis option is also included in [Plugin API](../plugin/option-api.md#extendmarkdown).\n:::\n\n### markdown.extractHeaders<Badge text=\"node\"/>\n\n- Type: `Array`\n- Default: `['h2', 'h3']`\n\nWhile preparing the page, headers are extracted from the Markdown file and stored in `this.$page.headers`. By default, MdPress will extract `h2` and `h3` elements for you. You can override the headers it pulls out in your `markdown` options.\n \n``` js\nmodule.exports = {\n  markdown: {\n    extractHeaders: [ 'h2', 'h3', 'h4' ]\n  }\n}\n```\n\n## Build Pipeline\n\n:::tip Configuring CSS Pre-processors\nMdPress comes with built-in webpack config for the CSS pre-processors listed below. For more information on installation these or pre-processors without built-in support, see [Using Pre-Processors](../guide/using-react.md#using-pre-processors) for more information.\n:::\n\n### postcss\n\n- Type: `Object`\n- Default: `{ plugins: [require('autoprefixer')] }`\n\nOptions for [postcss-loader](https://github.com/postcss/postcss-loader). Note specifying this value will overwrite autoprefixer and you will need to include it yourself.\n\n### Stylus\n\n- Type: `Object`\n- Default: `{ preferPathResolver: 'webpack' }`\n\nOptions for [stylus-loader](https://github.com/shama/stylus-loader).\n\n### scss\n\n- Type: `Object`\n- Default: `{}`\n\nOptions for [sass-loader](https://github.com/webpack-contrib/sass-loader) to load `*.scss` files.\n\n### Sass\n\n- Type: `Object`\n- Default: `{ indentedSyntax: true }`\n\nOptions for [sass-loader](https://github.com/webpack-contrib/sass-loader) to load `*.sass` files.\n\n### less\n\n- Type: `Object`\n- Default: `{}`\n\nOptions for [less-loader](https://github.com/webpack-contrib/less-loader).\n\n### configureWebpack\n\n- Type: `Object | Function`\n- Default: `undefined`\n\nEdit the internal webpack config. If the value is an Object, it will be merged into the final config using [webpack-merge](https://github.com/survivejs/webpack-merge); If the value is a function, it will receive the config as the 1st argument and an `isServer` flag as the 2nd argument. You can either mutate the config directly, or return an object to merge:\n\n``` js\nmodule.exports = {\n  configureWebpack: (config, isServer) => {\n    if (!isServer) {\n      // mutate the config for client\n    }\n  }\n}\n```\n\n### chainWebpack\n\n- Type: `Function`\n- Default: `undefined`\n\nEdit the internal webpack config with [webpack-chain](https://github.com/mozilla-neutrino/webpack-chain).\n\n``` js\nmodule.exports = {\n  chainWebpack: (config, isServer) => {\n    // config is an instance of ChainableConfig\n  }\n}\n```"}))};var a=r(t(0)),o=r(t(608));function r(e){return e&&e.__esModule?e:{default:e}}},604:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return r.default.createElement("svg",{className:"icon outbound",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},r.default.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),r.default.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))};var a,o=t(0),r=(a=o)&&a.__esModule?a:{default:a};t(606)},605:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=(0,o.default)().$page,t=e.pageKey,i=void 0===t?n.key:t,l=e.className,u=e.slotKey,d=void 0===u?"default":u;(0,s.setGlobalInfo)("pageKey",i);var c=r.default[i]||function(){return null};return a.default.createElement(c,{className:l,slotKey:d})};var a=i(t(0)),o=i(t(99)),r=i(t(164)),s=t(36);function i(e){return e&&e.__esModule?e:{default:e}}t(607)},606:function(e,n,t){},607:function(e,n,t){},608:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=y(t(100)),o=y(t(29)),r=y(t(166)),s=t(0),i=y(s),l=y(t(4)),u=t(101),d=y(t(99)),c=y(t(102)),f=t(165),p=y(t(609)),h=y(t(605)),m=y(t(604)),g=y(t(37));function y(e){return e&&e.__esModule?e:{default:e}}var b="server"===(0,t(36).getEnv)();function w(e){var n=e.markDownString,t=e.className,l=e.slotKey,y=(0,s.useRef)(e.md||g.default.createMD()).current,w=(0,d.default)(),k=w.$site,x=w.$page,T=(0,s.useState)(null),S=(0,o.default)(T,2),D=S[0],M=S[1],j=(0,s.useRef)(null);return(0,s.useEffect)((function(){M(document.getElementById(l))}),[]),(0,s.useEffect)((function(){"default"!==l&&j&&D&&((0,a.default)(D.childNodes).forEach((function(e,n){var t=j.current.childNodes[n];t?j.current.replaceChild(e,t):j.current.appendChild(e)})),D.parentNode.removeChild(D))}),[D]),"default"!==l?i.default.createElement("div",{ref:j}):((0,f.useComponentWillMount)((function(){!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e.use((function(e){return(0,u.SupportReactComponent)(e,{allowErrorLog:!0,sandbox:(0,r.default)({},n,t),babelInit:function(e){e.availablePlugins.filterXSS&&(e.availablePlugins.filterXSS=function(){return{}})}})}))}(y,c.default,{$site:k,$page:x,JSON:JSON,ClientOnly:p.default,console:console,Content:h.default,OutboundLink:m.default,$withBase:function(e){var n=k.base;return"/"===e.charAt(0)?n+e.slice(1):e}})})),b?i.default.createElement(v,{html:y.render(n),slotKey:l,className:t}):(0,s.useMemo)((function(){var e=y.render(n);return i.default.createElement(v,{html:e,slotKey:l,className:t})}),[n,l,t]))}function v(e){var n=e.html,t=e.slotKey,a=e.className;return i.default.createElement("div",{className:"content content__"+t+" "+a,dangerouslySetInnerHTML:{__html:n}})}w.propTypes={markDownString:l.default.string,className:l.default.string,scrollAnchor:l.default.bool,mdInit:l.default.func,md:l.default.object},w.defaultProps={markDownString:"",className:"",scrollAnchor:!0,mdInit:function(){}},n.default=w},609:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(29));n.default=function(e){var n=(0,o.useState)(!1),t=(0,a.default)(n,2),s=t[0],l=t[1],u=e.children,d=e.onSSR,c=void 0===d?r.default.createElement(i,null):d;return(0,o.useEffect)((function(){l(!0)}),[]),s?u:c};var o=t(0),r=s(o);function s(e){return e&&e.__esModule?e:{default:e}}var i=function(){return r.default.createElement("span",null)}}}]);