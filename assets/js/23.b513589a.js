(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{533:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=e.className,t=void 0===n?"":n,i=e.slotKey;return s.default.createElement(s.default.Fragment,null,s.default.createElement(o.default,{slotKey:i,className:t,markDownString:'\n# Design Concepts of MdPress\n\nThe design concepts of MdPress are mainly reflected in the following aspects:\n\n1. Pluggable.\n2. Convention over configuration.\n3. Reasonable priority management.\n\n## Pluggable\n\nthe introduction of the [Plugin API](../plugin/README.md). What are the benefits of plugins?\n\n### Decoupling\n\nWith plugins, we can implement many of the core functions with plugins, and you can see many built-in plugins [here](https://github.com/docschina/mdpress/tree/master/packages/%40mdpress/core/lib/node/internal-plugins) that cover many of the core functions of MdPress, which used to blend in all parts of the code base, but now they’re clear at a glance.\n\n### Configuration management\n\nIn the past, when we came across some less common requirements, we had some doubts: if we wanted to not support it, MdPress usage scenarios were limited; but if we wanted to support it, we had to write it into the core code base and set up a separate configuration API for it. For the maintainers, apart from not conducive to long-term maintenance, this sometimes makes us feel exhausted. We must think of some better solutions. Yes, this is plugin.\n\n### `.mdpress/config.js` is also a plugin\n\nYes, your configuration file is also a plugin, so you can use the Plugin API directly without having to create a new plugin for it and import it in the configuration.\n\n::: tip\nThe options supported by `.mdpress/config.js` are actually based on the plugin options and add some specific options.\n:::\n\n\n### `theme/index.js` is also a plugin\n\nThe root configuration file of the theme is also a plugin.\n\n::: tip\nAs with `.mdpress/config.js`, the options supported by `theme/index.js` are based on the plugin options and add some specific options. Using a graph to express their relationship:\n\n<SvgContainer>\n<svg viewBox="0 0 2806 912" version="1.1" xmlns="http://www.w3.org/2000/svg">\n    <desc>Created with Sketch.</desc>\n    <defs></defs>\n    <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">\n        <rect id="Rectangle-3" fillOpacity="0" fill="#FFFFFF" x="0" y="0" width="2806" height="912"></rect>\n        <circle id="Oval" stroke="#979797" fill="#EC5975" cx="1212.5" cy="455.5" r="355.5"></circle>\n        <circle id="Oval" stroke="#979797" fill="#937AC4" cx="1592.5" cy="455.5" r="355.5"></circle>\n        <path d="M1402.5,155.000018 C1501.96722,218.018606 1568,329.058303 1568,455.520781 C1568,581.983259 1501.96722,693.022956 1402.5,756.041544 C1303.03279,693.022977 1237,581.983271 1237,455.520781 C1237,329.058291 1303.03279,218.018585 1402.50003,155 Z" id="Combined-Shape" stroke="#FFFFFF" strokeWidth="10" fill="#00BD8C"></path>\n        <text id=".mdpress/-config.js" fontFamily="ArialMT, Arial" fontSize="60" fontWeight="normal" fill="#FFFFFF">\n            <tspan x="901.101562" y="436">.mdpress/</tspan>\n            <tspan x="929.446289" y="503">config.js</tspan>\n        </text>\n        <text id="Plugin-API" fontFamily="ArialMT, Arial" fontSize="72" fontWeight="normal" fill="#FFFFFF">\n            <tspan x="1302.42773" y="436">Plugin</tspan>\n            <tspan x="1344.47461" y="516">API</tspan>\n        </text>\n        <text id="theme/-index.js" fontFamily="ArialMT, Arial" fontSize="60" fontWeight="normal" fill="#FFFFFF">\n            <tspan x="1662.78613" y="436">theme/</tspan>\n            <tspan x="1652.78125" y="503">index.js</tspan>\n        </text>\n    </g>\n</svg>\n</SvgContainer>\n:::\n\n### Apply plugins in a plugin\n\nIn MdPress, you have the ability to apply some plugins in a plugin:\n\n```js\n// mdpress-plugin-xxx\nmodule.exports = {\n  plugins: [\n    \'a\', \'b\', \'c\'\n  ]\n}\n```\n\n## Convention over configuration.\n\nMdPress 1.0 begin to introduce some conventions to reduce the user’s excessive configuration pressure, the most intuitive manifestation of this is the conventions for the [document directory structure](../guide/directory-structure.md) and the [theme directory structure](../theme/writing-a-theme.md#directory-structure).\n\nIn the future, we may combine community feedback to introduce more agreements. Let’s wait and see.\n\n## Reasonable priority management.\n\nSenior users have found that both theme developers and regular users have the ability to customize global `palettes`, `styles`, `templates` and `plugins`, so how do they work together?\n\n### Loading Priority\n\nFor `templates/*`, follow the certain loading priority. Taking `templates/ssr.html` as an example:\n\n\x3c!-- textlint-disable en-capitalization, terminology --\x3e\n\n@flowstart\ncond1=>condition: User’s ssr.html\nexists?\ncond2=>condition: Theme’s ssr.html\nexists?\nstage1=>operation: Using user’s ssr.html\nstage2=>operation: Using theme’s ssr.html\nstage3=>operation: Using default ssr.html\n\ncond1(no, right)->cond2(no)->stage3\ncond1(yes, bottom)->stage1\ncond2(yes, bottom)->stage2\n@flowend\n\n\x3c!-- textlint-enable --\x3e\n\n::: warning Note\nWhen customizing `templates/ssr.html`, or `templates/dev.html`, it’s best to edit it on the basis of the [default template files](https://github.com/docschina/mdpress/tree/master/packages/@mdpress/core/lib/app/index.dev.html), otherwise it may cause a build failure.\n:::\n\n### Overriding\n\nFor `palette.styl`, `index.styl` and `plugins`, follow the principles of overriding:\n\n#### palette.styl\n\nUser’s `styles/palette.styl` has a higher priority than the theme’s `styles/palette.styl`, so the theme can define its own palette and the user can tweak it. For example:\n\n```stylus\n// theme/styles/palette.styl\n$accentColor = #0f0\n```\n\n```stylus\n// .mdpress/styles/palette.styl\n$accentColor = #f00\n```\n\nSo the final value of `$accentColor` is `#f00`.\n\n#### index.styl\n\nBoth the user’s `styles/index.styl` and the theme’s `styles/index.styl` are generated into the final `CSS` file, but the user’s style is generated later and therefore has higher priority. For example:\n\n```stylus\n// theme/styles/index.styl\n.content\n  font-size 14px\n```\n\n```stylus\n// .mdpress/styles/index.styl\n.content\n  font-size 15px\n```\n\nThe final generated CSS is as follows:\n\n```css\n/* theme/styles/index.styl */\n.content {\n  font-size: 14px;\n}\n\n/* .mdpress/styles/index.styl */\n.content {\n  font-size: 15px;\n}\n```\n\n#### plugins\n\nSince all plugins with the same name can be applied ONLY once by default, users can override the default options for plugins in theme. For example:\n\n```js\n// theme/index.js\nmodule.exports = {\n  plugins: [\n    \'mdpress-plugin-xxx\',\n    { name: \'foo\' }\n  ]\n}\n```\n\n```js\n// .mdpress/config.js\nmodule.exports = {\n  plugins: [\n    \'mdpress-plugin-xxx\',\n    { name: \'bar\' }\n  ]\n}\n```\n\nThen the final value of `name` option will be `bar`.\n\n\n## Others\n\nWith the goal of decoupling, we were able to separate MdPress into the following two libraries by introducing monorepo:\n\n- [@mdpress/core](https://github.com/docschina/mdpress/tree/master/packages/@mdpress/core)：Including the core implementation of `dev`, `build` and `Plugin API`;\n- [@mdpress/theme-default](https://github.com/docschina/mdpress/tree/master/packages/@mdpress/theme-default)：The default theme you see now.\n\nOf course, for most users, you don’t need to worry about these three libraries. The [MdPress](https://www.npmjs.com/search?Q=mdpress) package has already assembled them together.\n\n\n'}))};var s=i(t(0)),o=i(t(608));function i(e){return e&&e.__esModule?e:{default:e}}},604:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return i.default.createElement("svg",{className:"icon outbound",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},i.default.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),i.default.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))};var s,o=t(0),i=(s=o)&&s.__esModule?s:{default:s};t(606)},605:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=(0,o.default)().$page,t=e.pageKey,l=void 0===t?n.key:t,r=e.className,u=e.slotKey,d=void 0===u?"default":u;(0,a.setGlobalInfo)("pageKey",l);var c=i.default[l]||function(){return null};return s.default.createElement(c,{className:r,slotKey:d})};var s=l(t(0)),o=l(t(99)),i=l(t(164)),a=t(36);function l(e){return e&&e.__esModule?e:{default:e}}t(607)},606:function(e,n,t){},607:function(e,n,t){},608:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=y(t(100)),o=y(t(29)),i=y(t(166)),a=t(0),l=y(a),r=y(t(4)),u=t(101),d=y(t(99)),c=y(t(102)),f=t(165),p=y(t(609)),m=y(t(605)),h=y(t(604)),g=y(t(37));function y(e){return e&&e.__esModule?e:{default:e}}var v="server"===(0,t(36).getEnv)();function b(e){var n=e.markDownString,t=e.className,r=e.slotKey,y=(0,a.useRef)(e.md||g.default.createMD()).current,b=(0,d.default)(),x=b.$site,F=b.$page,P=(0,a.useState)(null),C=(0,o.default)(P,2),S=C[0],M=C[1],k=(0,a.useRef)(null);return(0,a.useEffect)((function(){M(document.getElementById(r))}),[]),(0,a.useEffect)((function(){"default"!==r&&k&&S&&((0,s.default)(S.childNodes).forEach((function(e,n){var t=k.current.childNodes[n];t?k.current.replaceChild(e,t):k.current.appendChild(e)})),S.parentNode.removeChild(S))}),[S]),"default"!==r?l.default.createElement("div",{ref:k}):((0,f.useComponentWillMount)((function(){!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e.use((function(e){return(0,u.SupportReactComponent)(e,{allowErrorLog:!0,sandbox:(0,i.default)({},n,t),babelInit:function(e){e.availablePlugins.filterXSS&&(e.availablePlugins.filterXSS=function(){return{}})}})}))}(y,c.default,{$site:x,$page:F,JSON:JSON,ClientOnly:p.default,console:console,Content:m.default,OutboundLink:h.default,$withBase:function(e){var n=x.base;return"/"===e.charAt(0)?n+e.slice(1):e}})})),v?l.default.createElement(w,{html:y.render(n),slotKey:r,className:t}):(0,a.useMemo)((function(){var e=y.render(n);return l.default.createElement(w,{html:e,slotKey:r,className:t})}),[n,r,t]))}function w(e){var n=e.html,t=e.slotKey,s=e.className;return l.default.createElement("div",{className:"content content__"+t+" "+s,dangerouslySetInnerHTML:{__html:n}})}b.propTypes={markDownString:r.default.string,className:r.default.string,scrollAnchor:r.default.bool,mdInit:r.default.func,md:r.default.object},b.defaultProps={markDownString:"",className:"",scrollAnchor:!0,mdInit:function(){}},n.default=b},609:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=a(t(29));n.default=function(e){var n=(0,o.useState)(!1),t=(0,s.default)(n,2),a=t[0],r=t[1],u=e.children,d=e.onSSR,c=void 0===d?i.default.createElement(l,null):d;return(0,o.useEffect)((function(){r(!0)}),[]),a?u:c};var o=t(0),i=a(o);function a(e){return e&&e.__esModule?e:{default:e}}var l=function(){return i.default.createElement("span",null)}}}]);