(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{522:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=e.className,t=void 0===n?"":n,s=e.slotKey;return o.default.createElement(o.default.Fragment,null,o.default.createElement(a.default,{slotKey:s,className:t,markDownString:'# Deploying\n\nThe following guides are based on some shared assumptions:\n\n- You are placing your docs inside the `docs` directory of your project;\n- You are using the default build output location (`.mdpress/dist`);\n- MdPress is installed as a local dependency in your project, and you have setup the following npm scripts:\n\n``` json\n{\n  "scripts": {\n    "docs:build": "mdpress build docs"\n  }\n}\n```\n\n## GitHub Pages\n\n1. Set correct `base` in `docs/.mdpress/config.js`.\n\n   If you are deploying to `https://<USERNAME>.github.io/`, you can omit `base` as it defaults to `"/"`.\n\n   If you are deploying to `https://<USERNAME>.github.io/<REPO>/`, (that is your repository is at `https://github.com/<USERNAME>/<REPO>`), set `base` to `"/<REPO>/"`.\n\n2. Inside your project, create `deploy.sh` with the following content (with highlighted lines uncommented appropriately) and run it to deploy:\n\n``` bash{13,20,23}\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run docs:build\n\n# navigate into the build output directory\ncd docs/.mdpress/dist\n\n# if you are deploying to a custom domain\n# echo \'www.example.com\' > CNAME\n\ngit init\ngit add -A\ngit commit -m \'deploy\'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\n::: tip\nYou can also run the above script in your CI setup to enable automatic deployment on each push.\n:::\n\n### GitHub Pages and Travis CI\n\n1. Set correct `base` in `docs/.mdpress/config.js`.\n\n   If you are deploying to `https://<USERNAME or GROUP>.github.io/`, you can omit `base` as it defaults to `"/"`.\n\n   If you are deploying to `https://<USERNAME or GROUP>.github.io/<REPO>/`, (that is your repository is at `https://github.com/<USERNAME>/<REPO>`), set `base` to `"/<REPO>/"`.\n\n2. Create a file named `.travis.yml` in the root of your project.\n\n3. Run `yarn` or `npm install` locally and commit the generated lockfile (i.e. `yarn.lock` or `package-lock.json`).\n\n4. Use GitHub Pages deploy provider template and follow the [travis documentation](https://docs.travis-ci.com/user/deployment/pages/).\n\n``` yaml\nlanguage: node_js\nnode_js:\n  - lts/*\ninstall:\n  - yarn install # npm ci\nscript:\n  - yarn docs:build # npm run docs:build\ndeploy:\n  provider: pages\n  skip_cleanup: true\n  local_dir: docs/.mdpress/dist\n  github_token: $GITHUB_TOKEN # A token generated on GitHub allowing Travis to push code on you repository. Set in the Travis settings page of your repository, as a secure variable\n  keep_history: true\n  on:\n    branch: master\n```\n\n### GitLab Pages and GitLab CI\n\n1. Set correct `base` in `docs/.mdpress/config.js`.\n\n   If you are deploying to `https://<USERNAME or GROUP>.gitlab.io/`, you can omit `base` as it defaults to `"/"`.\n\n   If you are deploying to `https://<USERNAME or GROUP>.gitlab.io/<REPO>/`, (that is your repository is at `https://gitlab.com/<USERNAME>/<REPO>`), set `base` to `"/<REPO>/"`.\n\n2. Set `dest` in `.mdpress/config.js` to `public`.\n\n3. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content.\n\n``` yaml\nimage: node:9.11.1\n\npages:\n  cache:\n    paths:\n    - node_modules/\n\n  script:\n  - yarn install # npm install\n  - yarn docs:build # npm run docs:build\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n```\n\n\n## Netlify\n\n1. On [Netlify](https://netlify.com), setup up a new project from GitHub with the following settings:\n\n- **Build Command:** `yarn docs:build` or `npm run docs:build`\n- **Publish directory:** `docs/.mdpress/dist`\n\n2. Hit the deploy button!\n\n## Google Firebase\n\n1. Make sure you have [firebase-tools](https://www.npmjs.com/package/firebase-tools) installed.\n\n2. Create `firebase.json` and `.firebaserc` at the root of your project with the following content:\n\n`firebase.json`:\n```json\n{\n "hosting": {\n   "public": "./docs/.mdpress/dist",\n   "ignore": []\n }\n}\n```\n\n`.firebaserc`:\n```js\n{\n "projects": {\n   "default": "<YOUR_FIREBASE_ID>"\n }\n}\n```\n\n3. After running `yarn docs:build` or `npm run docs:build`, deploy with the command `firebase deploy`.\n\n## Surge\n\n1. First install [surge](https://www.npmjs.com/package/surge), if you havenâ€™t already.\n\n2. Run `yarn docs:build` or `npm run docs:build`.\n\n3. Deploy to surge, by typing `surge docs/.mdpress/dist`.\n\nYou can also deploy to a [custom domain](http://surge.sh/help/adding-a-custom-domain) by adding `surge docs/.mdpress/dist yourdomain.com`.\n\n## Heroku\n\n1. First install [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).\n\n2. Create a Heroku account [here](https://signup.heroku.com).\n\n3. Run `heroku login` and fill in your Heroku credentials:\n\n   ``` bash\n   heroku login\n   ```\n\n4. Create a file called `static.json` in the root of your project with the content below:\n\n   `static.json`:\n   ```json\n   {\n     "root": "./docs/.mdpress/dist"\n   }\n   ```\n\nThis is the configuration of your site. See more at [heroku-buildpack-static](https://github.com/heroku/heroku-buildpack-static).\n\n5. Set up your Heroku git remote:\n\n``` bash\n# version change\ngit init\ngit add .\ngit commit -m "My site ready for deployment."\n\n# creates a new app with a specified name\nheroku apps:create example\n\n# set buildpack for static sites\nheroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git\n```\n\n6. Deploying Your Site\n\n``` bash\n# publish site\ngit push heroku master\n\n# opens a browser to view the Dashboard version of Heroku CI\nheroku open\n```'}))};var o=s(t(0)),a=s(t(608));function s(e){return e&&e.__esModule?e:{default:e}}},604:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return s.default.createElement("svg",{className:"icon outbound",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},s.default.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),s.default.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))};var o,a=t(0),s=(o=a)&&o.__esModule?o:{default:o};t(606)},605:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=(0,a.default)().$page,t=e.pageKey,r=void 0===t?n.key:t,u=e.className,l=e.slotKey,d=void 0===l?"default":l;(0,i.setGlobalInfo)("pageKey",r);var c=s.default[r]||function(){return null};return o.default.createElement(c,{className:u,slotKey:d})};var o=r(t(0)),a=r(t(99)),s=r(t(164)),i=t(36);function r(e){return e&&e.__esModule?e:{default:e}}t(607)},606:function(e,n,t){},607:function(e,n,t){},608:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=y(t(100)),a=y(t(29)),s=y(t(166)),i=t(0),r=y(i),u=y(t(4)),l=t(101),d=y(t(99)),c=y(t(102)),p=t(165),f=y(t(609)),h=y(t(605)),m=y(t(604)),g=y(t(37));function y(e){return e&&e.__esModule?e:{default:e}}var b="server"===(0,t(36).getEnv)();function v(e){var n=e.markDownString,t=e.className,u=e.slotKey,y=(0,i.useRef)(e.md||g.default.createMD()).current,v=(0,d.default)(),w=v.$site,k=v.$page,S=(0,i.useState)(null),R=(0,a.default)(S,2),N=R[0],_=R[1],M=(0,i.useRef)(null);return(0,i.useEffect)((function(){_(document.getElementById(u))}),[]),(0,i.useEffect)((function(){"default"!==u&&M&&N&&((0,o.default)(N.childNodes).forEach((function(e,n){var t=M.current.childNodes[n];t?M.current.replaceChild(e,t):M.current.appendChild(e)})),N.parentNode.removeChild(N))}),[N]),"default"!==u?r.default.createElement("div",{ref:M}):((0,p.useComponentWillMount)((function(){!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e.use((function(e){return(0,l.SupportReactComponent)(e,{allowErrorLog:!0,sandbox:(0,s.default)({},n,t),babelInit:function(e){e.availablePlugins.filterXSS&&(e.availablePlugins.filterXSS=function(){return{}})}})}))}(y,c.default,{$site:w,$page:k,JSON:JSON,ClientOnly:f.default,console:console,Content:h.default,OutboundLink:m.default,$withBase:function(e){var n=w.base;return"/"===e.charAt(0)?n+e.slice(1):e}})})),b?r.default.createElement(E,{html:y.render(n),slotKey:u,className:t}):(0,i.useMemo)((function(){var e=y.render(n);return r.default.createElement(E,{html:e,slotKey:u,className:t})}),[n,u,t]))}function E(e){var n=e.html,t=e.slotKey,o=e.className;return r.default.createElement("div",{className:"content content__"+t+" "+o,dangerouslySetInnerHTML:{__html:n}})}v.propTypes={markDownString:u.default.string,className:u.default.string,scrollAnchor:u.default.bool,mdInit:u.default.func,md:u.default.object},v.defaultProps={markDownString:"",className:"",scrollAnchor:!0,mdInit:function(){}},n.default=v},609:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=i(t(29));n.default=function(e){var n=(0,a.useState)(!1),t=(0,o.default)(n,2),i=t[0],u=t[1],l=e.children,d=e.onSSR,c=void 0===d?s.default.createElement(r,null):d;return(0,a.useEffect)((function(){u(!0)}),[]),i?l:c};var a=t(0),s=i(a);function i(e){return e&&e.__esModule?e:{default:e}}var r=function(){return s.default.createElement("span",null)}}}]);