(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{561:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){var e=n.className,t=void 0===e?"":e,o=n.slotKey;return s.default.createElement(s.default.Fragment,null,s.default.createElement(a.default,{slotKey:o,className:t,markDownString:'# 部署\n\n下述的指南基于以下条件：\n\n- 文档放置在项目的 `docs` 目录中；\n- 使用的是默认的构建输出位置；\n- MdPress 以本地依赖的形式被安装到你的项目中，并且配置了如下的 npm scripts:\n\n``` json\n{\n  "scripts": {\n    "docs:build": "mdpress build docs"\n  }\n}\n```\n\n## GitHub Pages\n\n1. 在 `docs/.mdpress/config.js` 中设置正确的 `base`。\n\n   如果你打算发布到 `https://<USERNAME>.github.io/`，则可以省略这一步，因为 `base` 默认即是 `"/"`。\n\n   如果你打算发布到 `https://<USERNAME>.github.io/<REPO>/`（也就是说你的仓库在 `https://github.com/<USERNAME>/<REPO>`），则将 `base` 设置为 `"/<REPO>/"`。\n\n2. 在你的项目中，创建一个如下的 `deploy.sh` 文件（请自行判断去掉高亮行的注释）:\n\n``` bash{13,20,23}\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.mdpress/dist\n\n# 如果是发布到自定义域名\n# echo \'www.example.com\' > CNAME\n\ngit init\ngit add -A\ngit commit -m \'deploy\'\n\n# 如果发布到 https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# 如果发布到 https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\n::: tip\n你可以在你的持续集成的设置中，设置在每次 push 代码时自动运行上述脚本。\n:::\n\n### GitHub Pages and Travis CI\n\n1. 在 `docs/.mdpress/config.js` 中设置正确的 `base`。\n\n   如果你打算发布到 `https://<USERNAME or GROUP>.github.io/`，则可以省略这一步，因为 `base` 默认即是 `"/"`。\n\n   如果你打算发布到 `https://<USERNAME or GROUP>.github.io/<REPO>/`（也就是说你的仓库在 `https://github.com/<USERNAME>/<REPO>`），则将 `base` 设置为 `"/<REPO>/"`。\n\n2. 在项目的根目录创建一个名为 `.travis.yml` 的文件；\n3. 在本地执行 `yarn` 或 `npm install` 并且提交生成的 lock 文件（即 `yarn.lock` 或 `package-lock.json`）；\n4. 使用 GitHub Pages 部署提供程序模板并遵循 [Travis 文档](https://docs.travis-ci.com/user/deployment/pages/)。\n\n``` yaml\nlanguage: node_js\nnode_js:\n  - lts/*\ninstall:\n  - yarn install # npm ci\nscript:\n  - yarn docs:build # npm run docs:build\ndeploy:\n  provider: pages\n  skip_cleanup: true\n  local_dir: docs/.mdpress/dist\n  github_token: $GITHUB_TOKEN # 在 GitHub 中生成，用于允许 Travis 向你的仓库推送代码。在 Travis 的项目设置页面进行配置，设置为 secure variable\n  keep_history: true\n  on:\n    branch: master\n```\n\n### GitLab Pages and GitLab CI\n\n1. 在 `docs/.mdpress/config.js` 中设置正确的 `base`。\n\n   如果你打算发布到 `https://<USERNAME or GROUP>.gitlab.io/`，则可以省略这一步，因为 `base` 默认即是 `"/"`。\n\n   如果你打算发布到 `https://<USERNAME or GROUP>.gitlab.io/<REPO>/`（也就是说你的仓库在 `https://gitlab.com/<USERNAME>/<REPO>`），则将 `base` 设置为 `"/<REPO>/"`。\n\n2. 在 `.mdpress/config.js` 中将 `dest` 设置为 `public`。\n3. 在你项目的根目录下创建一个名为 `.gitlab-ci.yml` 的文件，无论何时你提交了更改，它都会帮助你自动构建和部署：\n\n``` yaml\nimage: node:9.11.1\n\npages:\n cache:\n   paths:\n   - node_modules/\n\n script:\n - yarn install # npm install\n - yarn docs:build # npm run docs:build\n artifacts:\n   paths:\n   - public\n only:\n - master\n```\n\n## Netlify\n\n1. 在 Netlify 中, 创建一个新的 GitHub 项目，使用以下设置：\n\n- **Build Command:** `yarn docs:build` 或者 `npm run docs:build`\n- **Publish directory:** `docs/.mdpress/dist`\n\n2. 点击 deploy 按钮！\n\n## Google Firebase\n\n1. 请确保你已经安装了 [firebase-tools](https://www.npmjs.com/package/firebase-tools)。\n\n2. 在你项目的根目录下创建 `firebase.json` 和 `.firebaserc`，并包含以下内容：\n\n`firebase.json`:\n```json\n{\n "hosting": {\n   "public": "./docs/.mdpress/dist",\n   "ignore": []\n }\n}\n```\n\n`.firebaserc`:\n``` js\n{\n "projects": {\n   "default": "<YOUR_FIREBASE_ID>"\n }\n}\n```\n\n3. 在执行了 `yarn docs:build` 或 `npm run docs:build` 后, 使用 `firebase deploy` 指令来部署。\n\n## Surge\n\n1. 首先，假设你已经安装了 [surge](https://www.npmjs.com/package/surge)；\n\n2. 运行 `yarn docs:build` 或者 `npm run docs:build`；\n\n3. 想要使用 surge 来部署，你可以运行： `surge docs/.mdpress/dist`；\n\n你也可以通过 `surge docs/.mdpress/dist yourdomain.com` 来部署到 [自定义域名](http://surge.sh/help/adding-a-custom-domain)。\n\n\n## Heroku\n\n1. 首先安装 [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli)；\n\n2. [在这里](https://signup.heroku.com) 注册一个 Heroku 账号；\n\n3. 运行 `heroku login` 并填写你的 Heroku 证书：\n\n   ``` bash\n   heroku login\n   ```\n\n4. 在你的项目根目录中，创建一个名为 `static.json` 的文件，并包含下述内容：\n\n`static.json`:\n```json\n{\n"root": "./docs/.mdpress/dist"\n}\n```\n\n这里是你项目的配置，请参考 [heroku-buildpack-static](https://github.com/heroku/heroku-buildpack-static) 了解更多。\n\n5. 配置 Heroku 的 git 远程仓库：\n\n``` bash\n# 版本变化\ngit init\ngit add .\ngit commit -m "My site ready for deployment."\n\n# 以指定的名称创建一个新的 heroku 应用\nheroku apps:create example\n\n# 为静态网站设置构建包\nheroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git\n```\n\n6. 部署你的网站：\n\n``` bash\n# 发布网站\ngit push heroku master\n\n# 打开浏览器查看 Helku CI 的 dashboard\nheroku open\n```'}))};var s=o(t(0)),a=o(t(608));function o(n){return n&&n.__esModule?n:{default:n}}},604:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return o.default.createElement("svg",{className:"icon outbound",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},o.default.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),o.default.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))};var s,a=t(0),o=(s=a)&&s.__esModule?s:{default:s};t(606)},605:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){var e=(0,a.default)().$page,t=n.pageKey,u=void 0===t?e.key:t,i=n.className,l=n.slotKey,d=void 0===l?"default":l;(0,r.setGlobalInfo)("pageKey",u);var c=o.default[u]||function(){return null};return s.default.createElement(c,{className:i,slotKey:d})};var s=u(t(0)),a=u(t(99)),o=u(t(164)),r=t(36);function u(n){return n&&n.__esModule?n:{default:n}}t(607)},606:function(n,e,t){},607:function(n,e,t){},608:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=b(t(100)),a=b(t(29)),o=b(t(166)),r=t(0),u=b(r),i=b(t(4)),l=t(101),d=b(t(99)),c=b(t(102)),p=t(165),f=b(t(609)),m=b(t(605)),h=b(t(604)),g=b(t(37));function b(n){return n&&n.__esModule?n:{default:n}}var E="server"===(0,t(36).getEnv)();function v(n){var e=n.markDownString,t=n.className,i=n.slotKey,b=(0,r.useRef)(n.md||g.default.createMD()).current,v=(0,d.default)(),k=v.$site,N=v.$page,R=(0,r.useState)(null),_=(0,a.default)(R,2),M=_[0],S=_[1],P=(0,r.useRef)(null);return(0,r.useEffect)((function(){S(document.getElementById(i))}),[]),(0,r.useEffect)((function(){"default"!==i&&P&&M&&((0,s.default)(M.childNodes).forEach((function(n,e){var t=P.current.childNodes[e];t?P.current.replaceChild(n,t):P.current.appendChild(n)})),M.parentNode.removeChild(M))}),[M]),"default"!==i?u.default.createElement("div",{ref:P}):((0,p.useComponentWillMount)((function(){!function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n.use((function(n){return(0,l.SupportReactComponent)(n,{allowErrorLog:!0,sandbox:(0,o.default)({},e,t),babelInit:function(n){n.availablePlugins.filterXSS&&(n.availablePlugins.filterXSS=function(){return{}})}})}))}(b,c.default,{$site:k,$page:N,JSON:JSON,ClientOnly:f.default,console:console,Content:m.default,OutboundLink:h.default,$withBase:function(n){var e=k.base;return"/"===n.charAt(0)?e+n.slice(1):n}})})),E?u.default.createElement(y,{html:b.render(e),slotKey:i,className:t}):(0,r.useMemo)((function(){var n=b.render(e);return u.default.createElement(y,{html:n,slotKey:i,className:t})}),[e,i,t]))}function y(n){var e=n.html,t=n.slotKey,s=n.className;return u.default.createElement("div",{className:"content content__"+t+" "+s,dangerouslySetInnerHTML:{__html:e}})}v.propTypes={markDownString:i.default.string,className:i.default.string,scrollAnchor:i.default.bool,mdInit:i.default.func,md:i.default.object},v.defaultProps={markDownString:"",className:"",scrollAnchor:!0,mdInit:function(){}},e.default=v},609:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=r(t(29));e.default=function(n){var e=(0,a.useState)(!1),t=(0,s.default)(e,2),r=t[0],i=t[1],l=n.children,d=n.onSSR,c=void 0===d?o.default.createElement(u,null):d;return(0,a.useEffect)((function(){i(!0)}),[]),r?l:c};var a=t(0),o=r(a);function r(n){return n&&n.__esModule?n:{default:n}}var u=function(){return o.default.createElement("span",null)}}}]);