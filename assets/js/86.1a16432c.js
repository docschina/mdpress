(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{591:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){var e=n.className,t=void 0===e?"":e,l=n.slotKey;return a.default.createElement(a.default.Fragment,null,a.default.createElement(o.default,{slotKey:l,className:t,markDownString:'# 开发主题\n\n想要书写一个主题，首先在你文档根目录创建一个 `.mdpress/theme` 目录，接着创建一个 `Layout.js` 文件：\n\n::: file\n.\n└─ .mdpress\n   └─ `theme`\n       └─ Layout.js\n:::\n\n到这里，就像开发一个普通的 React 应用一样。如何组织你的主题，这完全取决于你。\n\n## 获取渲染内容\n\n当前的 `.md` 文件渲染的内容，可以作为一个独特的全局组件 `<Content/>` 来使用，你可能想要它显示在页面中的某个地方。一个最简单的主题，可以是一个唯一的 `Layout.js` 组件，并包含以下内容：\n\n``` html\n<template>\n  <div class="theme-container">\n    <Content/>\n  </div>\n</template>\n```\n\n**更多请阅读:**\n\n- [Markdown 插槽](../guide/markdown-slot.md)\n\n## 内容摘抄\n\n如果一个 markdown 文件中有一个 `\x3c!-- more --\x3e` 注释，则该注释之前的内容会被抓取并暴露在 `$page.excerpt` 属性中。如果你在开发一个博客主题，你可以用这个属性来渲染一个带摘抄的文章列表。\n\n## 目录结构\n\n随着需求的变化，只有一个布局组件 `Layout.js` 可能还不够，你可能想要定义更多的布局组件用于不同的页面，你可能还想要自定义一个[调色板](../config/README.md#palette-styl)，甚至应用一些插件。\n\n那么是时候重新组织你的主题了！一个约定的主题的目录结构如下：\n\n::: file\ntheme\n├── `sandbox`\n│   └── xxx.js\n├── `components`\n│   └── xxx.js\n├── `layouts`\n│   ├── Layout.js _(**必要的**)_\n│   └── 404.js\n├── `styles`\n│   ├── index.styl\n│   └── palette.styl\n├── `templates`\n│   ├── dev.html\n│   └── ssr.html\n├── `index.js`\n├── `enhanceApp.js`\n└── package.json\n:::\n\n- `theme/sandbox`: 该目录下的组件都会被自动注册为供 Markdown 使用的沙盒组件。\n- `theme/components`: React 组件。\n- `theme/layouts`: 布局组件，其中  `Layout.js` 是必需的。\n- `theme/styles`: 全局的样式和调色板。\n- `theme/templates`: 修改默认的模板文件。\n- `theme/index.js`: 主题文件的入口文件。\n- `theme/enhanceApp.js`: 主题水平的客户端增强文件。\n\n::: warning 注意\n当你将你的主题以一个 npm 包的形式发布时，如果你没有任何主题配置，即没有 `theme/index.js`，那么你需要将 `package.json` 中的 `"main"` 字段设置为 `layouts/Layout.js`，只有这样 MdPress 才能正确地解析主题。\n\n```json\n{\n  ...\n  "main": "layouts/Layout.js",\n  ...\n}\n```\n\n:::\n\n## 布局组件\n\n假设你的主题 `layouts` 目录如下：\n\n::: file\ntheme\n└── `layouts`\n    ├── Layout.js\n    ├── AnotherLayout.js\n    └── 404.js\n:::\n\n然后，所有的页面将会默认使用 `Layout.js` 作为布局组件，对于那些匹配不到的路由将会使用 `404.js`。\n\n如果你想要在某一个页面中使用 `AnotherLayout.js` 作为布局组件，那么你只需要更新这个页面的 `frontmatter`：\n\n```markdown\n---\nlayout: AnotherLayout\n---\n````\n\n::: tip\n每个 layout 组件都可能会渲染出截然不同的页面，如果你想设置一些全局的 UI（如全局的 `<header>`），可以考虑使用 [globalLayout](./option-api.md#globallayout)。\n:::\n\n## 使用插件\n\n你可以通过主题的配置文件 `themePath/index.js` 来给主题应用一些插件：\n\n```js\nmodule.exports = {\n  plugins: [\n    \'@mdpress/pwa\',\n    { \n      serviceWorker: true,\n      updatePopup: true\n    }\n  ]\n}\n```\n\n## 网站和页面的元数据\n\n`Layout` 组件将会对每一个文档目录下的 `.md` 执行一次，同时，整个网站以及特定页面的元数据将分别暴露为 `site` 和 `$page` 属性，它们通过 `useData` 钩子注入到当前应用的组件中。\n\n这是你现在看到的这个网站的 `$site` 的值：\n\n``` json\n{\n  "title": "MdPress",\n  "description": "Markdown 驱动的网站生成器",\n  "base": "/",\n  "pages": [\n    {\n      "lastUpdated": 1524027677000,\n      "path": "/",\n      "title": "MdPress",\n      "frontmatter": {}\n    },\n    ...\n  ]\n}\n```\n\n`title`, `description` 和 `base` 会从 `.mdpress/config.js` 中对应的的字段复制过来，而 `pages` 是一个包含了每个页面元数据对象的数据，包括它的路径、页面标题（明确地通过 [YAML front matter](../guide/markdown.md#front-matter) 指定，或者通过该页面的第一个标题取到），以及所有源文件中的 `YAML front matter` 的数据。\n\n下面的这个对象是你正在看的这个页面的 `$page` 的值：\n\n``` json\n{\n  "lastUpdated": 1524847549000,\n  "path": "/custom-themes.html",\n  "title": "自定义主题",\n  "headers": [/* ... */],\n  "frontmatter": {}\n}\n```\n\n如果用户在 `.mdpress/config.js` 配置了 `themeConfig`，你将可以通过 `$site.themeConfig` 访问到它。如此一来，你可以通过它来对用户开放一些自定义主题的配置 —— 比如指定目录或者页面的顺序，你也可以结合 `$site.pages` 来动态地构建导航链接。\n\n::: tip 提示\n`lastUpdated` 是这个文件最后一次 git 提交的 UNIX 时间戳，更多细节请参考：[最后更新时间](./default-theme-config.md#最后更新时间)。\n:::\n\n**参考:**\n\n- [全局计算属性](../guide/global-computed.md).\n\n\n## 应用配置\n\n自定义主题也可以通过主题根目录下的 `enhanceApp.js` 文件来对 MdPress 应用进行拓展配置。这个文件应当 `export default` 一个钩子函数，并接受一个包含了一些应用级别属性的对象作为参数。你可以使用这个钩子来安装一些额外的沙盒组件，或者增加额外的路由等：\n\n``` js\nexport default ({\n  sandbox, // MdPress 用于给 Markdown 文件中使用 React 组件的沙箱\n  routes, // 当前应用的路由配置\n  siteData, // 站点元数据\n  isServer, // 当前应用配置是处于 服务端渲染 或 客户端\n  mdConfig, // 当前应用的 Markdown 额外配置\n  hooks, // 附加到根实例的一些钩子\n}) => {\n  // ...做一些其他的应用级别的优化\n}\n```\n'}))};var a=l(t(0)),o=l(t(608));function l(n){return n&&n.__esModule?n:{default:n}}},604:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return l.default.createElement("svg",{className:"icon outbound",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},l.default.createElement("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),l.default.createElement("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}))};var a,o=t(0),l=(a=o)&&a.__esModule?a:{default:a};t(606)},605:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){var e=(0,o.default)().$page,t=n.pageKey,r=void 0===t?e.key:t,u=n.className,d=n.slotKey,i=void 0===d?"default":d;(0,s.setGlobalInfo)("pageKey",r);var c=l.default[r]||function(){return null};return a.default.createElement(c,{className:u,slotKey:i})};var a=r(t(0)),o=r(t(99)),l=r(t(164)),s=t(36);function r(n){return n&&n.__esModule?n:{default:n}}t(607)},606:function(n,e,t){},607:function(n,e,t){},608:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=g(t(100)),o=g(t(29)),l=g(t(166)),s=t(0),r=g(s),u=g(t(4)),d=t(101),i=g(t(99)),c=g(t(102)),f=t(165),m=g(t(609)),p=g(t(605)),h=g(t(604)),y=g(t(37));function g(n){return n&&n.__esModule?n:{default:n}}var v="server"===(0,t(36).getEnv)();function j(n){var e=n.markDownString,t=n.className,u=n.slotKey,g=(0,s.useRef)(n.md||y.default.createMD()).current,j=(0,i.default)(),M=j.$site,b=j.$page,x=(0,s.useState)(null),_=(0,o.default)(x,2),k=_[0],E=_[1],L=(0,s.useRef)(null);return(0,s.useEffect)((function(){E(document.getElementById(u))}),[]),(0,s.useEffect)((function(){"default"!==u&&L&&k&&((0,a.default)(k.childNodes).forEach((function(n,e){var t=L.current.childNodes[e];t?L.current.replaceChild(n,t):L.current.appendChild(n)})),k.parentNode.removeChild(k))}),[k]),"default"!==u?r.default.createElement("div",{ref:L}):((0,f.useComponentWillMount)((function(){!function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n.use((function(n){return(0,d.SupportReactComponent)(n,{allowErrorLog:!0,sandbox:(0,l.default)({},e,t),babelInit:function(n){n.availablePlugins.filterXSS&&(n.availablePlugins.filterXSS=function(){return{}})}})}))}(g,c.default,{$site:M,$page:b,JSON:JSON,ClientOnly:m.default,console:console,Content:p.default,OutboundLink:h.default,$withBase:function(n){var e=M.base;return"/"===n.charAt(0)?e+n.slice(1):n}})})),v?r.default.createElement(w,{html:g.render(e),slotKey:u,className:t}):(0,s.useMemo)((function(){var n=g.render(e);return r.default.createElement(w,{html:n,slotKey:u,className:t})}),[e,u,t]))}function w(n){var e=n.html,t=n.slotKey,a=n.className;return r.default.createElement("div",{className:"content content__"+t+" "+a,dangerouslySetInnerHTML:{__html:e}})}j.propTypes={markDownString:u.default.string,className:u.default.string,scrollAnchor:u.default.bool,mdInit:u.default.func,md:u.default.object},j.defaultProps={markDownString:"",className:"",scrollAnchor:!0,mdInit:function(){}},e.default=j},609:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t(29));e.default=function(n){var e=(0,o.useState)(!1),t=(0,a.default)(e,2),s=t[0],u=t[1],d=n.children,i=n.onSSR,c=void 0===i?l.default.createElement(r,null):i;return(0,o.useEffect)((function(){u(!0)}),[]),s?d:c};var o=t(0),l=s(o);function s(n){return n&&n.__esModule?n:{default:n}}var r=function(){return l.default.createElement("span",null)}}}]);